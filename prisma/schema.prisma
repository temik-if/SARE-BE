generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  TEACHER
  COORDINATOR
}

enum ShiftType {
  MORNING
  AFTERNOON
  EVENING
}

enum BookingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  NO_RETURN
  CANCELED
}

enum ResourceStatusType {
  AVAILABLE
  UNAVAILABLE
}

enum VerificationCodeType {
  ACTIVATION
  PASSWORD_RESET
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  first_name String
  last_name  String
  full_name  String
  password   String
  is_active  Boolean  @default(false)
  type       UserType
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  bookings  Booking[]
  penalties Penalty[]
  codes     VerificationCode?
}

model Booking {
  id          Int           @id @default(autoincrement())
  user_id     String
  resource_id Int
  shift       ShiftType
  status      BookingStatus
  date        String
  class       Int[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user     User     @relation(fields: [user_id], references: [id])
  resource Resource @relation(fields: [resource_id], references: [id])
}

model Resource {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  status    ResourceStatusType
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  equipment Equipment?
  room      Room?
  bookings  Booking[]
}

model Equipment {
  resource_id   Int      @id
  serial_number String   @unique
  model         String
  brand         String
  resource      Resource @relation(fields: [resource_id], references: [id])
}

model Room {
  resource_id Int      @id
  capacity    Int
  resource    Resource @relation(fields: [resource_id], references: [id])
}

model Penalty {
  id          Int      @id @default(autoincrement())
  user_id     String
  description String
  duration    Int
  start_date  DateTime @default(now())
  end_date    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  user_id   String   @unique
  code      String   @unique
  type      VerificationCodeType
  attempts  Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
}